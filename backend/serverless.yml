service:
  name: serverless-campground-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider: 
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  # tracing:
  #   lambda: true
  #   apiGateway: true
  
  environment:
    CAMPGROUNDS_TABLE: Campgrounds-${self:provider.stage}
    CAMPGROUND_ID_INDEX: CampgroundIdIndex
    CAMPGROUNDS_S3_BUCKET: serverless-campground-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Campgrounds API
        description: Serverless Campground App
    models:
      - name: CreateCampgroundRequest
        contentType: application/json
        schema: ${file(models/create-campground-request.json)}
      - name: UpdateCampgroundRequest
        contentType: application/json
        schema: ${file(models/update-campground-request.json)}


functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetCampgrounds:
    handler: src/lambda/http/getCampgrounds.handler
    events:
      - http:
          method: get
          path: campgrounds
          cors: true
          # authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAMPGROUNDS_TABLE}

  GetCampground:
    handler: src/lambda/http/getCampground.handler
    events:
      - http:
          method: get
          path: campgrounds/{campgroundId}
          cors: true
          # authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAMPGROUNDS_TABLE}

  CreateCampground:
    handler: src/lambda/http/createCampground.handler
    events:
      - http:
          method: post
          path: campgrounds
          cors: true
          # authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new campground
            description: Create a new campground
            requestModels:
              'application/json': CreateCampgroundRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAMPGROUNDS_TABLE}

  UpdateCampground:
    handler: src/lambda/http/updateCampground.handler
    events:
      - http:
          method: patch
          path: campgrounds/{campgroundId}
          cors: true
          # authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a new campground
            description: Update a new campground
            requestModels:
              'application/json': UpdateCampgroundRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAMPGROUNDS_TABLE}

  DeleteCampground:
    handler: src/lambda/http/deleteCampground.handler
    events:
      - http:
          method: delete
          path: campgrounds/{campgroundId}
          cors: true
          # authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAMPGROUNDS_TABLE}


  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: campgrounds/{campgroundId}/attachment
          cors: true
          # authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.CAMPGROUNDS_S3_BUCKET}/*


resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
          
    CampgroundsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: campgroundId
            AttributeType: S
          - AttributeName: author
            AttributeType: S
        KeySchema:
          - AttributeName: campgroundId
            KeyType: HASH
          - AttributeName: author
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CAMPGROUNDS_TABLE}

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.CAMPGROUNDS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders: 
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.CAMPGROUNDS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
